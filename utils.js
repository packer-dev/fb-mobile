import { API_URL } from "./config";

export const validateEmail = ({ value }) => {
  const emailRegex = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/;
  return emailRegex.test(value) ? "" : "Email invalid.";
};

export const generateUUID = () => {
  return "xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g, function (c) {
    var r = (Math.random() * 16) | 0,
      v = c === "x" ? r : (r & 0x3) | 0x8;
    return v.toString(16);
  });
};

export const formatDate = (date) => {
  let day = String(date.getDate()).padStart(2, "0");
  let month = String(date.getMonth() + 1).padStart(2, "0"); // Months are zero-based
  let year = date.getFullYear();
  let hours = String(date.getHours()).padStart(2, "0");
  let minutes = String(date.getMinutes()).padStart(2, "0");
  let seconds = String(date.getSeconds()).padStart(2, "0");

  return `${day}/${month}/${year} ${hours}:${minutes}:${seconds}`;
};

export const getCurrentDateTime = () => {
  const now = new Date();

  const year = now.getFullYear();
  const month = String(now.getMonth() + 1).padStart(2, "0"); // Months are zero-based
  const day = String(now.getDate()).padStart(2, "0");
  const hours = String(now.getHours()).padStart(2, "0");
  const minutes = String(now.getMinutes()).padStart(2, "0");
  const seconds = String(now.getSeconds()).padStart(2, "0");

  return `${year}-${month}-${day} ${hours}:${minutes}:${seconds}`;
};

const getRandomName = () => {
  const firstNames = ["L√¢m", "Anh", "Khoa", "Minh", "T√∫", "Vy", "Huy", "Linh"];
  const lastNames = [
    "Nguy·ªÖn",
    "Tr·∫ßn",
    "L√™",
    "Ph·∫°m",
    "Hu·ª≥nh",
    "Ho√†ng",
    "V≈©",
    "ƒê·∫∑ng",
  ];

  const firstName = firstNames[Math.floor(Math.random() * firstNames.length)];
  const lastName = lastNames[Math.floor(Math.random() * lastNames.length)];

  return `${firstName} ${lastName}`;
};

const removeAccents = (str) => {
  var AccentsMap = [
    "a√†·∫£√£√°·∫°ƒÉ·∫±·∫≥·∫µ·∫Ø·∫∑√¢·∫ß·∫©·∫´·∫•·∫≠",
    "A√Ä·∫¢√É√Å·∫†ƒÇ·∫∞·∫≤·∫¥·∫Æ·∫∂√Ç·∫¶·∫®·∫™·∫§·∫¨",
    "dƒë",
    "Dƒê",
    "e√®·∫ª·∫Ω√©·∫π√™·ªÅ·ªÉ·ªÖ·∫ø·ªá",
    "E√à·∫∫·∫º√â·∫∏√ä·ªÄ·ªÇ·ªÑ·∫æ·ªÜ",
    "i√¨·ªâƒ©√≠·ªã",
    "I√å·ªàƒ®√ç·ªä",
    "o√≤·ªè√µ√≥·ªç√¥·ªì·ªï·ªó·ªë·ªô∆°·ªù·ªü·ª°·ªõ·ª£",
    "O√í·ªé√ï√ì·ªå√î·ªí·ªî·ªñ·ªê·ªò∆†·ªú·ªû·ª†·ªö·ª¢",
    "u√π·ªß≈©√∫·ª•∆∞·ª´·ª≠·ªØ·ª©·ª±",
    "U√ô·ª¶≈®√ö·ª§∆Ø·ª™·ª¨·ªÆ·ª®·ª∞",
    "y·ª≥·ª∑·ªπ√Ω·ªµ",
    "Y·ª≤·ª∂·ª∏√ù·ª¥",
  ];
  for (var i = 0; i < AccentsMap.length; i++) {
    var re = new RegExp("[" + AccentsMap[i].substr(1) + "]", "g");
    var char = AccentsMap[i][0];
    str = str.replace(re, char);
  }
  return str;
};

const getRandomEmail = (name) => {
  const emailProviders = ["example.com", "mail.com", "inbox.com", "email.com"];
  const provider =
    emailProviders[Math.floor(Math.random() * emailProviders.length)];
  const cleanName = removeAccents(name.toLowerCase().replace(" ", "."));
  const email = cleanName + "@" + provider;
  return email;
};

export const ramdomUser = () => {
  const randomName = getRandomName();
  const randomEmail = getRandomEmail(randomName);
  return {
    email: randomEmail,
    name: randomName,
  };
};

export const emojiList = [
  "üíå",
  "üíò",
  "üíù",
  "üíñ",
  "üíó",
  "üíì",
  "üíû",
  "üíï",
  "üíü",
  "‚ù£Ô∏è",
  "üíî",
  "‚ù§Ô∏è‚Äçüî•",
  "‚ù§Ô∏è‚Äçü©π",
  "‚ù§Ô∏è",
  "ü©∑",
  "üß°",
  "üíõ",
  "üíö",
  "üíô",
  "ü©µ",
  "üíú",
  "ü§é",
  "üñ§",
  "ü©∂",
  "ü§ç",
  "üíã",
  "üíØ",
  "üí¢",
  "üí•",
  "üí¶",
  "üí®",
  "üï≥Ô∏è",
  "üí¨",
  "üëÅÔ∏è‚Äçüó®Ô∏è",
  "üó®Ô∏è",
  "üóØÔ∏è",
  "üí≠",
  "üí§",
  "üî¥",
  "üü†",
  "üü°",
  "üü¢",
  "üîµ",
  "üü£",
  "üü§",
  "‚ö´",
  "‚ö™",
  "üü•",
  "üüß",
  "üü®",
  "üü©",
  "üü¶",
  "üü™",
  "üü´",
  "‚¨õ",
  "‚¨ú",
  "‚óºÔ∏è",
  "‚óªÔ∏è",
  "‚óæ",
  "‚óΩ",
  "‚ñ™Ô∏è",
  "‚ñ´Ô∏è",
  "üî∂",
  "üî∑",
  "üî∏",
  "üîπ",
  "üî∫",
  "üîª",
  "üí†",
  "üîò",
  "üî≥",
  "üî≤",
];

export const sendXmlHttpRequest = (endpoint, data) => {
  const xhr = new XMLHttpRequest();

  return new Promise((resolve, reject) => {
    xhr.onreadystatechange = (e) => {
      if (xhr.readyState !== 4) {
        return;
      }

      if (xhr.status === 200) {
        resolve(JSON.parse(xhr.responseText));
      } else {
        reject("Error");
      }
    };
    xhr.open("POST", endpoint);
    xhr.setRequestHeader("Content-Type", "multipart/form-data");
    xhr.send(data);
  });
};
